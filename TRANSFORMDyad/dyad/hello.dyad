# A simple lumped thermal model
component Hello
  # Ambient temperature
  parameter T_inf::Temperature = 300
  # Initial temperature
  parameter T0::Temperature = 320
  # Convective heat transfer coefficient
  parameter h::CoefficientOfHeatTransfer = 0.7
  # Surface area
  parameter A::Area = 1.0
  # Mass of thermal capacitance
  parameter m::Mass = 0.1
  # Specific Heat
  parameter c_p::SpecificHeatCapacity = 1.2
  variable T::Temperature
relations
  # Specify initial conditions
  initial T = T0
  # Newton's law of cooling/heating
  m*c_p*der(T) = h*A*(T_inf-T)
metadata {"Dyad": {"tests": {"case1": {"stop": 10, "expect": {"initial": {"T": 320}}}}}}
end

analysis World
  extends TransientAnalysis(stop=10)
  model = Hello(T_inf=T_inf, h=h)
  parameter T_inf::Temperature = 300
  parameter h::CoefficientOfHeatTransfer = 0.7
end

connector HeatPort
    potential T::Temperature
    flow Q_flow::HeatFlowRate
end

partial component PartialResistance
    port_a = HeatPort()
    port_b = HeatPort()

    variable R::Real
relations
    0 = port_a.Q_flow + port_b.Q_flow
    port_a.Q_flow = (port_a.T - port_b.T)/max(eps(),R)
end

component Convection
    extends PartialResistance()
    parameter surfaceArea::Area = 0.01
    parameter alpha::CoefficientOfHeatTransfer = 1000
relations
        R = 1/(alpha*max(eps(),surfaceArea))
end

component Temperature
    port = HeatPort()
    parameter T::Temperature = 293.15
relations
    port.T = T
end

component HeatFlow
    port = HeatPort()
    parameter Q_flow::HeatFlowRate = 0
relations
    port.Q_flow = Q_flow
end

component ConductionTest
  resistance = Convection()
  boundary_a = Temperature()
  boundary_b = Temperature(T=500)
  relations
  connect(boundary_a.port, resistance.port_a)
  connect(boundary_b.port, resistance.port_b)
end

analysis SimConductionTest
    extends TransientAnalysis(stop=10)
    model = ConductionTest()
end