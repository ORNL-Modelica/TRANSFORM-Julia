### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   TestConvection(; name, T_a, T_b, surfaceArea, alpha)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `T_a`         |                          | K  |   293.15 |
| `T_b`         |                          | K  |   313.15 |
| `surfaceArea`         |                          | m2  |   2 |
| `alpha`         |                          | W/(m2.K)  |   15 |

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `Q_total`         |                          | W  | 
"""
@component function TestConvection(; name, T_a=293.15, T_b=313.15, surfaceArea=2, alpha=15)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (T_a::Float64 = T_a))
  append!(__params, @parameters (T_b::Float64 = T_b))
  append!(__params, @parameters (surfaceArea::Float64 = surfaceArea))
  append!(__params, @parameters (alpha::Float64 = alpha))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (Q_total(t)))

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named boundary_a = TRANSFORM.TemperatureBoundary(T=T_a))
  push!(__systems, @named boundary_b = TRANSFORM.TemperatureBoundary(T=T_b))
  push!(__systems, @named resistance = TRANSFORM.Convection(surfaceArea=surfaceArea, alpha=alpha))

  ### Defaults
  __defaults = Dict()
  __defaults[Q_total] = (0)

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, D(Q_total) ~ resistance.port_a.Q_flow)
  push!(__eqs, connect(boundary_a.port, resistance.port_a))
  push!(__eqs, connect(boundary_b.port, resistance.port_b))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export TestConvection

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(TestConvection)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
