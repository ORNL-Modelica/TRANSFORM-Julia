### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   Sphere(; name, r_inner, r_outer, lambda)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `r_inner`         |                          | m  |   0.01 |
| `r_outer`         |                          | m  |   1 |
| `lambda`         |                          | W/(m.K)  |   5 |

## Connectors

 * `port_a` - ([`HeatPort`](@ref))
 * `port_b` - ([`HeatPort`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `R`         |                          | K/W  | 
"""
@component function Sphere(; name, r_inner=0.01, r_outer=1, lambda=5)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (r_inner::Float64 = r_inner))
  append!(__params, @parameters (r_outer::Float64 = r_outer))
  append!(__params, @parameters (lambda::Float64 = lambda))
  append!(__params, @parameters (pi::Float64 = 3.14159), [description = "pi - should be moved elsewhere"])

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (R(t)))

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named port_a = TRANSFORM.HeatPort())
  push!(__systems, @named port_b = TRANSFORM.HeatPort())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, 0 ~ port_a.Q_flow + port_b.Q_flow)
  push!(__eqs, port_a.Q_flow ~ (port_a.T - port_b.T) / max(eps_, R))
  push!(__eqs, R ~ 1 / (4 * pi * lambda) * (1 / r_inner - 1 / r_outer))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export Sphere

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Sphere)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
