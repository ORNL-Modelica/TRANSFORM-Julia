### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   part_ab_ThermalResistances(; name, T_a, T_b, r_inner, th_1, th_ins, th_2)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `T_a`         |                          | K  |   95.6 |
| `T_b`         |                          | K  |   273.15 |
| `r_inner`         |                          | m  |   0.1 |
| `th_1`         |                          | m  |   0.0025 |
| `th_ins`         |                          | m  |   0.01 |
| `th_2`         |                          | m  |   0.0025 |

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `Q_total`         |                          | W  | 
"""
@component function part_ab_ThermalResistances(; name, T_a=95.6, T_b=273.15, r_inner=0.1, th_1=0.0025, th_ins=0.01, th_2=0.0025)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (T_a::Float64 = T_a))
  append!(__params, @parameters (T_b::Float64 = T_b))
  append!(__params, @parameters (r_inner::Float64 = r_inner))
  append!(__params, @parameters (th_1::Float64 = th_1))
  append!(__params, @parameters (th_ins::Float64 = th_ins))
  append!(__params, @parameters (th_2::Float64 = th_2))
  append!(__params, @parameters (r_ins_inner::Float64 = r_inner + th_1))
  append!(__params, @parameters (r_ins_outer::Float64 = r_ins_inner + th_ins))
  append!(__params, @parameters (r_outer::Float64 = r_ins_outer + th_2))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (Q_total(t)))

  ### Constants
  __constants = Any[]
  append!(__constants, @parameters (pi::Float64 = 3.14159))

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named boundary_a = TRANSFORM.TemperatureBoundary(T=T_a))
  push!(__systems, @named boundary_b = TRANSFORM.TemperatureBoundary(T=T_b))
  push!(__systems, @named convectionInner = TRANSFORM.Convection(surfaceArea=4 * pi * r_inner ^ 2, alpha=150))
  push!(__systems, @named linerInner = TRANSFORM.Sphere(r_inner=r_inner, r_outer=r_ins_inner, lambda=15))
  push!(__systems, @named contact_1 = TRANSFORM.Contact(surfaceArea=4 * pi * r_ins_inner ^ 2, Rc_pp=0.003))
  push!(__systems, @named insulation = TRANSFORM.Sphere(r_inner=r_ins_inner, r_outer=r_ins_outer, lambda=0.033))
  push!(__systems, @named contact_2 = TRANSFORM.Contact(surfaceArea=4 * pi * r_ins_outer ^ 2, Rc_pp=0.003))
  push!(__systems, @named linerOuter = TRANSFORM.Sphere(r_inner=r_ins_outer, r_outer=r_outer, lambda=15))
  push!(__systems, @named radiationOuter = TRANSFORM.Radiation(surfaceArea=4 * pi * r_outer ^ 2, epsilon=0.7))
  push!(__systems, @named convectionOuter = TRANSFORM.Convection(surfaceArea=4 * pi * r_outer ^ 2, alpha=6))

  ### Defaults
  __defaults = Dict()
  __defaults[Q_total] = (0)

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, D(Q_total) ~ convectionInner.port_a.Q_flow)
  push!(__eqs, connect(convectionInner.port_a, boundary_a.port))
  push!(__eqs, connect(convectionInner.port_b, linerInner.port_a))
  push!(__eqs, connect(linerInner.port_b, contact_1.port_a))
  push!(__eqs, connect(contact_1.port_b, insulation.port_a))
  push!(__eqs, connect(insulation.port_b, contact_2.port_a))
  push!(__eqs, connect(contact_2.port_b, linerOuter.port_a))
  push!(__eqs, connect(linerOuter.port_b, radiationOuter.port_a, convectionOuter.port_a))
  push!(__eqs, connect(convectionOuter.port_b, radiationOuter.port_b, boundary_b.port))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export part_ab_ThermalResistances

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(part_ab_ThermalResistances)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
