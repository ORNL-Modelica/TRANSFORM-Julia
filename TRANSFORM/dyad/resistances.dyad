component TemperatureBoundary
    port = HeatPort()
    parameter T::Temperature = 293.15
relations
    port.T = T
end

component HeatFlowBoundary
    port = HeatPort()
    parameter Q_flow::HeatFlowRate = 0
relations
    port.Q_flow = Q_flow
end

partial component PartialResistance
    port_a = HeatPort()
    port_b = HeatPort()
    variable R::Real(units = "K/W")
relations
    0 = port_a.Q_flow + port_b.Q_flow
    port_a.Q_flow = (port_a.T - port_b.T)/max(eps_,R)
end

component Plane
    extends PartialResistance()
    parameter th::Length = 0.01
    parameter crossArea::Area = 1.0
    parameter lambda::ThermalConductivity = 5.0
    # should be a constant instead e.g., eps_()
    final parameter eps_::Real(units="m^2") = 1e-15
relations
    R = th/max(eps_, lambda*crossArea)
end

component Convection
    extends PartialResistance()
    parameter surfaceArea::Area = 0.01
    parameter alpha::CoefficientOfHeatTransfer = 1000
    # should be a constant instead e.g., eps_()
    final parameter eps_::Real(units="m^2") = 1e-15
relations
    R = 1/max(eps_,alpha*surfaceArea)
end

component Sphere
    extends PartialResistance()
    parameter r_inner::Length = 0.01
    parameter r_outer::Length = 1.0
    parameter lambda::ThermalConductivity = 5.0
    # pi - should be moved elsewhere
    final parameter pi::Real = 3.14159    
relations
    R = 1/(4*pi*lambda)*(1/r_inner - 1/r_outer)
end

component Contact
    extends PartialResistance()
       
    parameter surfaceArea::Area = 0.01
    parameter Rc_pp::Real(units="m^2*K/W") = 1.0
    # should be a constant instead e.g., eps_()
    final parameter eps_::Real(units="m^2") = 1e-15
relations
        R = Rc_pp/max(eps_,surfaceArea)
end

component Radiation
    extends PartialResistance() 
    parameter surfaceArea::Area = 0.01
    parameter epsilon::Real(units="m/m") = 1.0
    parameter useExact::Boolean=true
    # should be a constant but causes an error
    final parameter sigma::Real(units="W/(m^2*K^4)") = 5.670374419 * 10^(-8)
relations
    #R ~ IfElse.ifelse(useExact,
    #            1/(surfaceArea*sigma*epsilon*(port_a.T^2+port_b.T^2)*(port_a.T + port_b.T)),
    #            1/(4*surfaceArea*sigma*epsilon*(0.5*(port_a.T + port_b.T))^3))

    #R = 1/(surfaceArea*sigma*epsilon*(port_a.T^2+port_b.T^2)*(port_a.T + port_b.T))
    R = ifelse(useExact,
        1/(surfaceArea*sigma*epsilon*(port_a.T^2+port_b.T^2)*(port_a.T + port_b.T)),
        1/(4*surfaceArea*sigma*epsilon*(0.5*(port_a.T + port_b.T))^3))
end